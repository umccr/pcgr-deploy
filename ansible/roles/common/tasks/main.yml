---
- name: Debug mount devices
  debug:
    msg: "{{ ansible_mounts }}"

- name: set timezone
  timezone:
    name: "{{ timezone }}"

- name: Setup hostname to avoid unable to resolve errors
  hostname:
    name: localhost

- name: Create "{{ pcgr.mount }}" 
  become: true
  file:
    path: "{{ pcgr.mount }}"
    state: directory
    recurse: yes
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
    mode: 0755

- name: "Check which of {{ aws.volume_device }} or {{ ostack.volume_device }} we have present"
  stat: path={{ item }}
  with_items: 
      - "{{ aws.volume_device }}"
      - "{{ ostack.volume_device }}"
  register: volume_device

- name: Debug mount devices
  debug:
    msg: "{{ item.stat.exists }}"
  with_items: "{{ volume_device.results }}"

- name: Create ext4 filesystem if not present on attached volume
  filesystem:
    fstype: ext4
    dev: "{{ item.item }}"
  with_items: "{{ volume_device.results }}"
  when:
      - not item is skipped
      - item.stat.exists

- name: Mount local work volume
  mount: 
    path: "{{ pcgr.mount }}"
    src: "{{ item.item }}"
    fstype: ext4 
    state: mounted
  with_items: "{{ volume_device.results }}"
  when:
      - not item is skipped
      - item.stat.exists

# Does not work since the lock file never gets removed, actually
#- name: Wait for automatic system updates to finish first
#  wait_for:
#    path: /var/lib/dpkg/lock
#    state: absent
#    timeout: 600

# https://github.com/ansible/ansible/issues/25414 ... unreliable :/
#- name: Wait for automatic system updates
#  become: true
#  become_user: root
#  shell: while fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 1; done;

# Trying target unattended-upgrades, works every time
- name: Wait for automatic system updates
  shell: while pgrep unattended; do sleep 10; done;

- name: Update system and install basics
  become: true
  become_user: root
  package: 
    name: "{{ item }}"
    state: latest 
    update_cache: yes
  with_items:
      - git
      - aptitude
      - unzip
      - wget
      - tar
      - gzip
      - bzip2
      - docker.io
      - python-docker
      - tabix
      - htop
      - nfs-common
      - python-pip
      - python3-pip
      - python3-venv

# XXX Debian specific, the default pkg does not support this
- name: Upgrade all packages to the latest version
  apt:
    name: "*"
    state: latest
    autoclean: yes

- name: Make sure vital python packages are installed on a python3 venv
  become: true
  pip:
    name: "{{ item }}"
    virtualenv: "{{ pcgr.mount }}/pcgr-{{ pcgr.number_release }}/venv"
    virtualenv_command: /usr/bin/python3 -m venv
    state: latest
  with_items:
      - docker-py
      - toml
      - boto3
      - awscli

- name: Add SSH keys for UMCCR team
  authorized_key:
    user: "{{ os_user }}"
    state: present
    key: "{{ lookup('file', item) }}"
  with_fileglob: "files/public_keys/*.pub"

- name: Add user to docker group
  become: true
  user: 
      name: "{{ os_user }}" 
      groups: docker
      append: yes

- name: Pull PCGR docker image for PCGR "{{ pcgr.number_release }}"
  become: true
  docker_image:
    name: sigven/pcgr
    state: present
    tag: "{{ pcgr.number_release }}"

- name: Download and unpack PCGR software, release "{{ pcgr.release }}"
  unarchive:
    src: https://github.com/sigven/pcgr/archive/{{ pcgr.release }}.tar.gz
    creates: "{{ pcgr.mount }}/pcgr-{{ pcgr.number_release }}"
    dest: "{{ pcgr.mount }}"
    remote_src: True

- name: Copy the AWS SQS file consumer daemon
  copy:
    src: files/pcgr_consumer.py
    dest: "{{ pcgr.mount }}/pcgr-{{ pcgr.number_release }}/pcgr_consumer.py"

- name: Give "{{ os_user }}" rights to write on "{{ pcgr.mount }}/pcgr-{{ pcgr.number_release }}"
  become: true
  file:
    path: "{{ pcgr.mount }}/pcgr-{{ pcgr.number_release }}"
    state: directory
    recurse: yes
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
    mode: 0755

- name: Creating default PCGR output directory on "{{ pcgr.mount }}/pcgr-{{ pcgr.number_release }}/output"
  become: true
  file:
    path: "{{ pcgr.mount }}/pcgr-{{ pcgr.number_release }}/output"
    state: directory
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
    mode: 0755

- name: Refresh group info
  become: false
  command: newgrp docker

- name: "Symlink latest version to {{ pcgr.mount }}/pcgr"
  file:
      src: "{{ pcgr.mount }}/pcgr-{{ pcgr.number_release }}"
      dest: "{{ pcgr.mount }}/pcgr"
      state: link

- name: "Setup systemd service file for PCGR consumer"
  become: true
  template:
    src: files/pcgr.service.j2
    dest: /etc/systemd/system/pcgr.service
    owner: root
    group: root
    mode: 0600

- name: Force systemd to reread configs and start PCGR consumer on boot
  systemd:
    daemon_reload: yes
    state: stopped
    name: pcgr
    enabled: yes

- name: Setup local firewall
  ufw:
    state: enabled
    rule: allow
    name: OpenSSH
